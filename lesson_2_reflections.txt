1. What happens when you initialize a repository? Why do you need to do it?

step 1: go to correct directory using: cd {directory pathway}
step 2: type git init 
step 3: use git status to check repository status 
step 4: add files to Git by typing: get add {file name}

2. How is the staging area different from the working directory and the repository? What value do you think it offers?

- working directory (before staging area) is the where draft files are saved but yet to be committed
- staging area is the step before sending commits to repository 

value of having a staging area allows for:
- more control on which files to commit 
- flexibility and efficiency to commit multiple files at ones (ability to commit all files in staging area at once)
- multiple file commits are useful when we have files that relate to each other i.e. index.html and .js files

3. How can you use the staging area to make sure you have one commit per logical change?

- add multiple files in the staging area and do ONE commit together 

4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Situations: experimental features, multiple language versions, testing, etc

Branches can help:
- to split experimental/test features into other branches 
- to avoid making changes to master
- allows for merging at a later stage

5. How do the diagrams help you visualize the branch structure?

The visual shows the relationship of each commit (within a branch) an how it relates to the previous commit and other branches. 
- whether it is reachable 
- which branch do we need to be on to make changes or see git logs (of the branch)

6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

- Merging branch gives the final version with changes from both commits
- "coins merge into master" means that master is the main branch with coins adding into master branch (cannot be vice versa)

7. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatics merge
Pros 
- save time 
- minimise human error

Cons
- might have merging conflicts 


