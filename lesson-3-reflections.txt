1. When would you want to use a remote repository rather than keeping all your work local?

- working on collaborative project 
- working on different machines

2. Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

- give more control to push when commits are a logical size i.e. new feature

3. Describe the differences between forks, clones, and branches. When would you use one instead of another?

- forks: to clone another GitHub users repository via GitHub
- clones: to copy another repository from GitHub or another machine 
- branches: to create different streams (context) for the code 

4. What is the benefit of having a copy of the last known state of the remote stored locally?

- ability to compare changes 
- ability to merge into master at a later state (manually)

5. How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

- I can share, compare and merge my code with other programmers. It would be easier using tools as such rather than doing in manually. 

6. When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

- In general, I think it is best practice to make any changes on a seperate branches (especially for collaboration) which can later be reviewed, merged and discarded when done. This is to minimise bugs or clashes in code. 
- Otherwise, making changes in master can be done for small changes that will not break the code such as text changes 
- branches allows for easy collaboration, troubleshooting, testing and experiments while changing on master is more straghtforward and doesn't need extra work like merging 